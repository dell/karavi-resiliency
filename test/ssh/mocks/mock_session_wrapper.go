// Code generated by MockGen. DO NOT EDIT.
// Source: podmon/test/ssh (interfaces: SessionWrapper)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionWrapper is a mock of SessionWrapper interface.
type MockSessionWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockSessionWrapperMockRecorder
}

// MockSessionWrapperMockRecorder is the mock recorder for MockSessionWrapper.
type MockSessionWrapperMockRecorder struct {
	mock *MockSessionWrapper
}

// NewMockSessionWrapper creates a new mock instance.
func NewMockSessionWrapper(ctrl *gomock.Controller) *MockSessionWrapper {
	mock := &MockSessionWrapper{ctrl: ctrl}
	mock.recorder = &MockSessionWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionWrapper) EXPECT() *MockSessionWrapperMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSessionWrapper) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSessionWrapperMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSessionWrapper)(nil).Close))
}

// CombinedOutput mocks base method.
func (m *MockSessionWrapper) CombinedOutput(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CombinedOutput", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CombinedOutput indicates an expected call of CombinedOutput.
func (mr *MockSessionWrapperMockRecorder) CombinedOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CombinedOutput", reflect.TypeOf((*MockSessionWrapper)(nil).CombinedOutput), arg0)
}
